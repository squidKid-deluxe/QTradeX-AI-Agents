{
 "source": "\"\"\"\n\u2554\u2550\u2557\u2554\u2566\u2557\u2566\u2550\u2557\u2554\u2550\u2557\u2554\u2566\u2557\u2554\u2550\u2557\u2550\u2557 \u2566\n\u2551\u2550\u256c\u2557\u2551 \u2560\u2566\u255d\u2560\u2550\u2563 \u2551\u2551\u2551\u2563 \u2554\u2569\u2566\u255d\n\u255a\u2550\u255d\u255a\u2569 \u2569\u255a\u2550\u2569 \u2569\u2550\u2569\u255d\u255a\u2550\u255d\u2569 \u255a\u2550\n\nema_cross.py\n\nIndicators:\n1. **Exponential Moving Averages (EMA)**:\n   - The bot uses two exponential moving averages (EMAs) with customizable periods (`ma1` and `ma2`).\n   - `ma1` and `ma2` are calculated using the Tulip Indicators (via the `tulipy.ema` function).\n\n   - **`ma1` (short-term EMA)**: A faster-moving average, typically more responsive to price changes.\n   - **`ma2` (long-term EMA)**: A slower-moving average, typically used to capture the general trend.\n\n2. **Indicator Calculation**:\n   - The EMAs are calculated using the closing prices of the asset over specified periods (`ma1` and `ma2`).\n   - The `qx.float_period` function is used to compute the values of the EMAs on the given price data.\n\nStrategy:\n1. **Moving Average Crossover Strategy**:\n   - The bot uses a basic moving average crossover strategy to generate buy and sell signals.\n   - The core logic of the strategy is:\n     - **qx.Buy Signal**: When `ma1` (short-term EMA) crosses above `ma2` (long-term EMA),\n     - **qx.Sell Signal**: When `ma1` (short-term EMA) crosses below `ma2` (long-term EMA), \n\"\"\"\n\n\nimport math\nimport time\n\nimport numpy as np\nimport qtradex as qx\n\n\nclass EmaCross(qx.BaseBot):\n    def __init__(self):\n        # tune values (moving averages)\n        self.tune = {\n            \"ma1_period\": 5.0,\n            \"ma2_period\": 10.0,\n        }\n        # optimizer clamps (min, max, strength)\n        self.clamps = [\n            [5, 100, 0.5],  # For ma1\n            [10, 150, 0.6],  # For ma2\n        ]\n        \n\n    def indicators(self, data):\n        # tulip indicators are exposed via qx.indicators.tulipy\n        # and cached on backend for optimization speed\n        return {\n            \"ma1\": qx.float_period(\n                qx.tu.ema,\n                (data[\"close\"], self.tune[\"ma1_period\"]),\n                (1,),\n            ),\n            \"ma2\": qx.float_period(\n                qx.tu.ema,\n                (data[\"close\"], self.tune[\"ma2_period\"]),\n                (1,),\n            ),\n        }\n\n    def plot(self, *args):\n        qx.plot(\n            *args,\n            (\n                # key, name, color, index, title\n                (\"ma1\", \"MA 1\", \"white\", 0, \"Main\"),\n                (\"ma2\", \"MA 2\", \"cyan\", 0, \"Main\"),\n            ),\n        )\n\n    def strategy(self, state, indicators):\n        if state[\"last_trade\"] is None:\n            return qx.Buy()\n        if indicators[\"ma1\"] > indicators[\"ma2\"] and isinstance(\n            state[\"last_trade\"], qx.Sell\n        ):\n            return qx.Buy()\n        if indicators[\"ma1\"] < indicators[\"ma2\"] and isinstance(\n            state[\"last_trade\"], qx.Buy\n        ):\n            return qx.Sell()\n        return None\n\n    def fitness(self, states, raw_states, asset, currency):\n        return [\n            \"roi_gross\",\n            \"sortino_ratio\",\n            \"trade_win_rate\",\n        ], {}\n\n\ndef main():\n    asset, currency = \"BTC\", \"USDT\"\n    wallet = qx.PaperWallet({asset: 0, currency: 1})\n    data = qx.Data(\n        exchange=\"kucoin\",\n        asset=asset,\n        currency=currency,\n        begin=\"2021-01-01\",\n        end=\"2023-01-01\",\n    )\n    bot = EmaCross()\n    qx.dispatch(bot, data, wallet)\n\n\nif __name__ == \"__main__\":\n    main()\n",
 "BEST ROI TUNE_Wed Mar 26 20:30:17 2025": {
  "tune": {
   "ma1_period": 5.600341649147547,
   "ma2_period": 14.356001827840004
  },
  "results": {
   "roi": 1.1837011139966256,
   "sortino_ratio": 0,
   "trade_win_rate": 0.34146341463414637
  }
 },
 "BEST SORTINO_RATIO TUNE_Wed Mar 26 20:30:17 2025": {
  "tune": {
   "ma1_period": 5.0,
   "ma2_period": 10.0
  },
  "results": {
   "roi": 0.89566993825689,
   "sortino_ratio": 0.0,
   "trade_win_rate": 0.2806736842105263
  }
 },
 "BEST TRADE_WIN_RATE TUNE_Wed Mar 26 20:30:17 2025": {
  "tune": {
   "ma1_period": 5.425981403311861,
   "ma2_period": 13.739437060281787
  },
  "results": {
   "roi": 1.149180736897667,
   "sortino_ratio": 0,
   "trade_win_rate": 0.37209302325581395
  }
 },
 "BEST ROI TUNE_Thu Mar 27 08:43:10 2025": {
  "tune": {
   "ma1_period": 5.511831217641116,
   "ma2_period": 12.044412940466678
  },
  "results": {
   "roi": 1.0822011084356942,
   "sortino_ratio": 0,
   "trade_win_rate": 0.35555555555555557
  }
 },
 "BEST SORTINO_RATIO TUNE_Thu Mar 27 08:43:10 2025": {
  "tune": {
   "ma1_period": 5.0,
   "ma2_period": 10.0
  },
  "results": {
   "roi": 0.8957595142083108,
   "sortino_ratio": 0,
   "trade_win_rate": 0.2807017543859649
  }
 },
 "BEST TRADE_WIN_RATE TUNE_Thu Mar 27 08:43:10 2025": {
  "tune": {
   "ma1_period": 5.511831217641116,
   "ma2_period": 12.044412940466678
  },
  "results": {
   "roi": 1.084419020329873,
   "sortino_ratio": 0,
   "trade_win_rate": 0.3544774473531531
  }
 },
 "BEST ROI TUNE_Thu Mar 27 08:44:02 2025": {
  "tune": {
   "ma1_period": 5.153895405464421,
   "ma2_period": 11.398529723381145
  },
  "results": {
   "roi": 1.066696591518887,
   "sortino_ratio": 0,
   "trade_win_rate": 0.3469387755102041
  }
 },
 "BEST SORTINO_RATIO TUNE_Thu Mar 27 08:44:02 2025": {
  "tune": {
   "ma1_period": 5.0,
   "ma2_period": 10.0
  },
  "results": {
   "roi": 0.8957595142083108,
   "sortino_ratio": 0,
   "trade_win_rate": 0.2807017543859649
  }
 },
 "BEST TRADE_WIN_RATE TUNE_Thu Mar 27 08:44:02 2025": {
  "tune": {
   "ma1_period": 5.153895405464421,
   "ma2_period": 11.398529723381145
  },
  "results": {
   "roi": 1.0666965915188873,
   "sortino_ratio": 0,
   "trade_win_rate": 0.346938775510204
  }
 },
 "BEST ROI TUNE_Thu Mar 27 08:50:14 2025": {
  "tune": {
   "ma1_period": 15,
   "ma2_period": 11
  },
  "results": {
   "roi": 1.2692090287690632,
   "sortino_ratio": 0,
   "trade_win_rate": 0.7058823529411765
  }
 },
 "BEST SORTINO_RATIO TUNE_Thu Mar 27 08:50:14 2025": {
  "tune": {
   "ma1_period": 5,
   "ma2_period": 10
  },
  "results": {
   "roi": 0.8957595142083108,
   "sortino_ratio": 0,
   "trade_win_rate": 0.2807017543859649
  }
 },
 "BEST TRADE_WIN_RATE TUNE_Thu Mar 27 08:50:14 2025": {
  "tune": {
   "ma1_period": 95,
   "ma2_period": 46
  },
  "results": {
   "roi": 0.6913522919204128,
   "sortino_ratio": -0.35864770807958724,
   "trade_win_rate": 1.0
  }
 },
 "BEST ROI TUNE_Thu Mar 27 08:51:45 2025": {
  "tune": {
   "ma1_period": 13.356147898713276,
   "ma2_period": 11.576249329195452
  },
  "results": {
   "roi": 1.2937462599919023,
   "sortino_ratio": 0,
   "trade_win_rate": 0.7352941176470589
  }
 },
 "BEST SORTINO_RATIO TUNE_Thu Mar 27 08:51:45 2025": {
  "tune": {
   "ma1_period": 15.0,
   "ma2_period": 11.0
  },
  "results": {
   "roi": 1.2699876231214489,
   "sortino_ratio": 0,
   "trade_win_rate": 0.7058823529411765
  }
 },
 "BEST TRADE_WIN_RATE TUNE_Thu Mar 27 08:51:45 2025": {
  "tune": {
   "ma1_period": 11.117349874439101,
   "ma2_period": 10.939502539592507
  },
  "results": {
   "roi": 1.041302770941602,
   "sortino_ratio": 0,
   "trade_win_rate": 0.7498851099044854
  }
 },
 "BEST ROI TUNE_Thu Mar 27 11:20:04 2025": {
  "tune": {
   "ma1_period": 13.356147898713276,
   "ma2_period": 11.576249329195452
  },
  "results": {
   "roi": 1.2937462599919023,
   "sortino_ratio": 0,
   "trade_win_rate": 0.7352941176470589
  }
 },
 "BEST SORTINO_RATIO TUNE_Thu Mar 27 11:20:04 2025": {
  "tune": {
   "ma1_period": 13.356147898713276,
   "ma2_period": 11.576249329195452
  },
  "results": {
   "roi": 1.2937462599919023,
   "sortino_ratio": 0,
   "trade_win_rate": 0.7352941176470589
  }
 },
 "BEST TRADE_WIN_RATE TUNE_Thu Mar 27 11:20:04 2025": {
  "tune": {
   "ma1_period": 13.356147898713276,
   "ma2_period": 11.576249329195452
  },
  "results": {
   "roi": 1.2937462599919023,
   "sortino_ratio": 0,
   "trade_win_rate": 0.7352941176470589
  }
 }
}