{
 "source": "\"\"\"\n\u2554\u2550\u2557\u2554\u2566\u2557\u2566\u2550\u2557\u2554\u2550\u2557\u2554\u2566\u2557\u2554\u2550\u2557\u2550\u2557 \u2566\n\u2551\u2550\u256c\u2557\u2551 \u2560\u2566\u255d\u2560\u2550\u2563 \u2551\u2551\u2551\u2563 \u2554\u2569\u2566\u255d\n\u255a\u2550\u255d\u255a\u2569 \u2569\u255a\u2550\u2569 \u2569\u2550\u2569\u255d\u255a\u2550\u255d\u2569 \u255a\u2550\n\nharmonica.py\n\n6 SAR Harmonica\n\nIndicators:\n\n### Parabolic SAR Setup:\n- The bot calculates 6 different Parabolic SAR values, each with a different scalar to adjust \n  the sensitivity of the SAR indicator. The SAR indicator helps track price trends and detect \n  potential reversals.\n\n### Exponential Moving Averages (EMA):\n- The strategy uses 4 different EMA values with varying periods (10, 60, and 90) to smooth out \n  price data and identify the overall trend direction.\n\nStrategy:\n\n- **Sell** conditions:\n    1. If the majority of SAR values are above the signal EMA, indicating a bearish trend.\n    2. If the price has increased significantly, with a certain threshold set for the SAR relative to the trade price.\n    3. If other bearish indicators are present, such as a bearish moving average crossing\n\n- **Buy** conditions:\n    1. If the majority of SAR values are below the signal EMA, indicating a bullish trend.\n    2. If the price is trending upwards, confirmed by a bullish moving average crossing.\n    3. The bot will only buy if the portfolio has sufficient USD balance to make the trade.\n\"\"\"\nimport math\nimport time\n\nimport numpy as np\nimport qtradex as qx\n\n\nclass ParabolicSARBot(qx.BaseBot):\n    def __init__(self):\n        # Parameters for the SAR and moving averages\n        self.drop = {\n            \"SAR_initial\": 0.02,\n            \"SAR_acceleration\": 0.2,\n            \"scalar_1\": 2.0,\n            \"scalar_2\": 4.0,\n            \"scalar_3\": 8.0,\n            \"scalar_4\": 10.0,\n            \"scalar_5\": 12.0,\n            \"scalar_6\": 14.0,\n            \"scalar_7\": 16.0,\n            \"ma1_period\": 5.0,\n            \"ma2_period\": 8.0,\n            \"ma3_period\": 12.0,\n            \"ma4_period\": 15.0,\n            \"signal_period\": 5.0,\n            \"sar_thresh\": 4.0,\n            \"signal_thresh\": 5.0,\n            \"signal_thresh_old\": 1.0,\n            \"signal_thresh_sell\": 0.9,\n            \"rest_multiplier\": 1.0,\n            \"min_rest\": 1.0,\n            \"buy_rest\": 1.0,\n            \"ago\": 3,\n        }\n\n        self.tune = {\n            \"SAR_initial\": 0.03025733047647713,\n            \"SAR_acceleration\": 0.19039874671925122,\n            \"scalar_1\": 2.7964677019042297,\n            \"scalar_2\": 4.630479397953835,\n            \"scalar_3\": 12.100260747395472,\n            \"scalar_4\": 14.235088994316875,\n            \"scalar_5\": 12.288907433576485,\n            \"scalar_6\": 14.209363904790804,\n            \"scalar_7\": 18.158550465916008,\n            \"ma1_period\": 5.345417974023874,\n            \"ma2_period\": 9.73247818092897,\n            \"ma3_period\": 15.535815413295927,\n            \"ma4_period\": 19.436484306474657,\n            \"signal_period\": 3.5984353787739525,\n            \"sar_thresh\": 2.444131549529109,\n            \"signal_thresh\": 3.687078101749861,\n            \"signal_thresh_old\": 1.9764105725674108,\n            \"signal_thresh_sell\": 1.0409730161049788,\n            \"rest_multiplier\": 1.4046953312186636,\n            \"min_rest\": 1.9212598575580446,\n            \"buy_rest\": 1.1354573628750735,\n            \"ago\": 62,\n        }\n\n        self.clamps = [\n            # min, max, strength\n            # sar initial + acceleration\n            [0.001, 1.0, 0.5],\n            [0.001, 1.0, 0.5],\n            # sar scalars\n            [1, 200, 1],\n            [1, 200, 1],\n            [1, 200, 1],\n            [1, 200, 1],\n            [1, 200, 1],\n            [1, 200, 1],\n            [1, 200, 1],\n            # moving averages\n            [5, 90, 0.5],\n            [5, 90, 0.5],\n            [5, 90, 0.5],\n            [5, 90, 0.5],\n            [2, 10, 0.5],\n            # magic numbers and thresholds\n            [1, 6, 1],\n            [0.1, 20, 1],\n            [0.1, 20, 1],\n            [0.1, 20, 1],\n            [0.1, 20, 1],\n            [1, 100, 1],\n            [1, 100, 1],\n            [0, 100, 1],\n        ]\n\n        # Initialize storage for trade details\n        self.storage = {\"hold\": 0}\n\n    def reset(self):\n        self.storage = {\"hold\": 0}\n\n    def autorange(self):\n        return super().autorange() + self.tune[\"ago\"]\n\n    def indicators(self, data):\n        \"\"\"\n        Calculate the Parabolic SAR and moving averages for strategy.\n        \"\"\"\n        # Calculate the SAR values for different scalars using self.tune\n        sars = np.array(\n            [\n                qx.tu.psar(\n                    data[\"high\"],\n                    data[\"low\"],\n                    self.tune[\"SAR_initial\"] / self.tune[f\"scalar_{h}\"],\n                    self.tune[\"SAR_acceleration\"] / self.tune[f\"scalar_{h}\"],\n                )\n                for h in range(1, 8)  # Iterates over scalars 1 to 7\n            ]\n        ).T\n\n        # Calculate the signal (simple moving average of close prices)\n        ma1 = qx.float_period(qx.tu.ema, (data[\"close\"], self.tune[\"ma1_period\"]), (1,))\n        ma2 = qx.float_period(qx.tu.ema, (data[\"close\"], self.tune[\"ma2_period\"]), (1,))\n        ma3 = qx.float_period(qx.tu.ema, (data[\"close\"], self.tune[\"ma3_period\"]), (1,))\n        signal = qx.float_period(\n            qx.tu.ema, (data[\"close\"], self.tune[\"signal_period\"]), (1,)\n        )\n        ma4 = qx.float_period(qx.tu.ema, (data[\"close\"], self.tune[\"ma4_period\"]), (1,))\n\n        return {\n            \"sars\": sars,\n            \"ma1\": ma1,\n            \"ma2\": ma2,\n            \"ma3\": ma3,\n            \"ma4\": ma4,\n            \"ma4_ago\": qx.lag(ma4, self.tune[\"ago\"]),\n            \"signal\": signal,\n        }\n\n    def plot(self, *args):\n        qx.plot(\n            *args,\n            (\n                (\"ma1\", \"MA 1\", \"white\", 0, \"SAR Harmonica\"),\n                (\"ma2\", \"MA 2\", \"cyan\", 0, \"SAR Harmonica\"),\n                (\"ma3\", \"MA 3\", \"teal\", 0, \"SAR Harmonica\"),\n                (\"ma4\", \"MA 4\", \"blue\", 0, \"SAR Harmonica\"),\n                (\"ma4_ago\", \"MA 4 old\", \"lightgreen\", 0, \"SAR Harmonica\"),\n                (\"sars\", \"SARs\", \"teal\", 0, \"SAR Harmonica\"),\n                (\"signal\", \"Signal\", \"tomato\", 0, \"SAR Harmonica\"),\n            ),\n        )\n\n    def strategy(self, state, indicators):\n        \"\"\"\n        Main strategy for handling buy/sell actions based on indicators.\n        \"\"\"\n        sars = indicators[\"sars\"]\n        signal = indicators[\"signal\"]\n        ma1 = indicators[\"ma1\"]\n        ma2 = indicators[\"ma2\"]\n        ma3 = indicators[\"ma3\"]\n        ma4 = indicators[\"ma4\"]\n        ma4_ago = indicators[\"ma4_ago\"]\n\n        market = sum(1 for sar in sars if sar < signal)\n\n        # Manage storage (hold, trade price, etc.)\n        key3 = (\n            signal if state[\"last_trade\"] is None else self.storage[\"trade_price\"][-1]\n        )\n        self.storage[\"trade_price\"] = self.storage.get(\"trade_price\", [key3, key3])\n\n        # Bearish conditions\n        bear_conditions = [\n            (market < self.tune[\"sar_thresh\"]) or (ma1 < ma2) or (ma1 < ma3),\n            (signal > self.tune[\"signal_thresh\"] * self.storage[\"trade_price\"][-1])\n            and (ma1 < ma4),\n            (signal > self.tune[\"signal_thresh_old\"] * self.storage[\"trade_price\"][-1])\n            and (ma1 < ma4_ago),\n        ]\n\n        # If bearish conditions are met, trigger Sell\n        if any(bear_conditions):\n            if (\n                state[\"last_trade\"] is None or isinstance(state[\"last_trade\"], qx.Buy)\n            ) and state[\"unix\"] > self.storage[\"hold\"]:\n                if signal > min(sars):\n                    if (\n                        signal\n                        > self.tune[\"signal_thresh_sell\"]\n                        * self.storage[\"trade_price\"][-1]\n                    ):\n                        rest = self.tune[\"rest_multiplier\"] * (\n                            max(sars) / self.storage[\"trade_price\"][-1]\n                        )\n                        rest = max(rest, self.tune[\"min_rest\"])\n                        self.storage[\"hold\"] = state[\"unix\"] + 86400 * rest\n                        self.storage[\"trade_price\"].append(signal)\n                        return qx.Sell()  # Execute Sell\n                    else:\n                        self.storage[\"trade_price\"].append(signal)\n                        return qx.Sell()  # Execute Sell\n\n        # Bullish conditions: If MA10 > MA60, trigger Buy\n        elif (ma1 > ma2) or (ma1 > ma3):\n            if any(sar < signal for sar in sars):\n                if state[\"last_trade\"] is None or isinstance(\n                    state[\"last_trade\"], qx.Sell\n                ):\n                    rest = self.tune[\"buy_rest\"]\n                    if state[\"unix\"] > self.storage[\"hold\"]:\n                        self.storage[\"hold\"] = state[\"unix\"] + 86400 * rest\n                        self.storage[\"trade_price\"].append(signal)\n                        return qx.Buy()  # Execute Buy\n\n        # Otherwise, do nothing\n        return None\n\n    def fitness(self, states, raw_states, asset, currency):\n        return [\n            \"roi_gross\",\n            \"sortino_ratio\",\n            \"trade_win_rate\",\n        ], {}\n\n\n# Main execution to backtest the bot\ndef main():\n    asset, currency = \"BTC\", \"USDT\"\n    wallet = qx.PaperWallet({asset: 0, currency: 1})\n    data = qx.Data(\n        exchange=\"kucoin\",\n        asset=asset,\n        currency=currency,\n        begin=\"2020-01-01\",\n        end=\"2025-01-01\",\n        # pool=\"1.19.58\"\n    )\n    bot = ParabolicSARBot()\n    qx.dispatch(bot, data, wallet)\n\n\nif __name__ == \"__main__\":\n    main()\n",
 "BEST ROI TUNE_Wed Mar 26 21:27:27 2025": {
  "tune": {
   "SAR_initial": 0.01615695380277033,
   "SAR_acceleration": 0.18623456888923146,
   "scalar_1": 1.9105078799899013,
   "scalar_2": 4.021894911078519,
   "scalar_3": 7.864405048503942,
   "scalar_4": 9.361049681031492,
   "scalar_5": 12.021778455937511,
   "scalar_6": 14.20435559958448,
   "scalar_7": 16.195111359061265,
   "ma1_period": 5.170897529350498,
   "ma2_period": 7.977181938786403,
   "ma3_period": 11.046995199762527,
   "ma4_period": 13.759716832276954,
   "signal_period": 4.740376574471362,
   "sar_thresh": 3.8699194095346527,
   "signal_thresh": 4.960581450783441,
   "signal_thresh_old": 0.9914296681946311,
   "signal_thresh_sell": 0.8899971063679548,
   "rest_multiplier": 1.0214390330577026,
   "min_rest": 1.0217187943301793,
   "buy_rest": 1.0070735215386044,
   "ago": 11
  },
  "results": {
   "roi": 1.4001266923046107,
   "sortino_ratio": 0,
   "trade_win_rate": 0.2328767123287671
  }
 },
 "BEST SORTINO_RATIO TUNE_Wed Mar 26 21:27:27 2025": {
  "tune": {
   "SAR_initial": 0.02,
   "SAR_acceleration": 0.2,
   "scalar_1": 2.0,
   "scalar_2": 4.0,
   "scalar_3": 8.0,
   "scalar_4": 10.0,
   "scalar_5": 12.0,
   "scalar_6": 14.0,
   "scalar_7": 16.0,
   "ma1_period": 5.0,
   "ma2_period": 8.0,
   "ma3_period": 12.0,
   "ma4_period": 15.0,
   "signal_period": 5.0,
   "sar_thresh": 4.0,
   "signal_thresh": 5.0,
   "signal_thresh_old": 1.0,
   "signal_thresh_sell": 0.9,
   "rest_multiplier": 1.0,
   "min_rest": 1.0,
   "buy_rest": 1.0,
   "ago": 3
  },
  "results": {
   "roi": 0.8683456787080517,
   "sortino_ratio": 0,
   "trade_win_rate": 0.23076923076923078
  }
 },
 "BEST TRADE_WIN_RATE TUNE_Wed Mar 26 21:27:27 2025": {
  "tune": {
   "SAR_initial": 0.018768566861993984,
   "SAR_acceleration": 0.19221414645572585,
   "scalar_1": 1.9669345949879986,
   "scalar_2": 3.9063355682580454,
   "scalar_3": 8.045311987997632,
   "scalar_4": 10.456889274144118,
   "scalar_5": 10.977997616133875,
   "scalar_6": 14.535694530356801,
   "scalar_7": 16.557627449427244,
   "ma1_period": 5.184169342540526,
   "ma2_period": 8.189304245407854,
   "ma3_period": 12.146350198186424,
   "ma4_period": 14.302146198038217,
   "signal_period": 4.88661961171181,
   "sar_thresh": 4.048627863521527,
   "signal_thresh": 5.1640639670202395,
   "signal_thresh_old": 1.0598928393311966,
   "signal_thresh_sell": 0.8968645449736385,
   "rest_multiplier": 0.9933597979888062,
   "min_rest": 1.0295098199260266,
   "buy_rest": 1.018591876024627,
   "ago": 10
  },
  "results": {
   "roi": 1.173066640222701,
   "sortino_ratio": 0,
   "trade_win_rate": 0.279523612796927
  }
 },
 "BEST ROI TUNE_Wed Mar 26 21:28:36 2025": {
  "tune": {
   "SAR_initial": 0.029675623371385525,
   "SAR_acceleration": 0.1895141809731723,
   "scalar_1": 2.8275031870704552,
   "scalar_2": 4.914246226004014,
   "scalar_3": 12.077175933996156,
   "scalar_4": 13.874592430028663,
   "scalar_5": 11.963498778998588,
   "scalar_6": 14.214649801722807,
   "scalar_7": 18.336047438246922,
   "ma1_period": 5.176783742403494,
   "ma2_period": 9.757046473498736,
   "ma3_period": 15.34042279779894,
   "ma4_period": 19.223933791700468,
   "signal_period": 3.669022818071224,
   "sar_thresh": 2.480579398983445,
   "signal_thresh": 3.669348608319772,
   "signal_thresh_old": 2.001294971362232,
   "signal_thresh_sell": 1.0799714614982507,
   "rest_multiplier": 1.4258340199596327,
   "min_rest": 1.8934744771421723,
   "buy_rest": 1.0923283910517074,
   "ago": 59
  },
  "results": {
   "roi": 2.65456757006224,
   "sortino_ratio": 0,
   "trade_win_rate": 0.34545454545454546
  }
 },
 "BEST SORTINO_RATIO TUNE_Wed Mar 26 21:28:36 2025": {
  "tune": {
   "SAR_initial": 0.03025733047647713,
   "SAR_acceleration": 0.19039874671925122,
   "scalar_1": 2.7964677019042297,
   "scalar_2": 4.630479397953835,
   "scalar_3": 12.100260747395472,
   "scalar_4": 14.235088994316875,
   "scalar_5": 12.288907433576485,
   "scalar_6": 14.209363904790804,
   "scalar_7": 18.158550465916008,
   "ma1_period": 5.345417974023874,
   "ma2_period": 9.73247818092897,
   "ma3_period": 15.535815413295927,
   "ma4_period": 19.436484306474657,
   "signal_period": 3.5984353787739525,
   "sar_thresh": 2.444131549529109,
   "signal_thresh": 3.687078101749861,
   "signal_thresh_old": 1.9764105725674108,
   "signal_thresh_sell": 1.0409730161049788,
   "rest_multiplier": 1.4046953312186636,
   "min_rest": 1.9212598575580446,
   "buy_rest": 1.1354573628750735,
   "ago": 62
  },
  "results": {
   "roi": 2.4921807593796017,
   "sortino_ratio": 0,
   "trade_win_rate": 0.3389830508474576
  }
 },
 "BEST TRADE_WIN_RATE TUNE_Wed Mar 26 21:28:36 2025": {
  "tune": {
   "SAR_initial": 0.030007844091084167,
   "SAR_acceleration": 0.18916152860932828,
   "scalar_1": 2.8664796922257336,
   "scalar_2": 4.965712741413367,
   "scalar_3": 11.978694123190209,
   "scalar_4": 13.896046051684328,
   "scalar_5": 11.963498778998588,
   "scalar_6": 14.109625316965706,
   "scalar_7": 18.041515542644035,
   "ma1_period": 5.26049548993495,
   "ma2_period": 9.788911779686137,
   "ma3_period": 15.340422797798942,
   "ma4_period": 19.223933791700464,
   "signal_period": 3.6690228180712237,
   "sar_thresh": 2.6051454677640673,
   "signal_thresh": 3.6517853832821587,
   "signal_thresh_old": 1.9218403497564425,
   "signal_thresh_sell": 1.0799714614982507,
   "rest_multiplier": 1.4208758732271052,
   "min_rest": 1.8979063705781494,
   "buy_rest": 1.0982321781212483,
   "ago": 60
  },
  "results": {
   "roi": 2.6084126241383716,
   "sortino_ratio": 0,
   "trade_win_rate": 0.34545454545454546
  }
 }
}